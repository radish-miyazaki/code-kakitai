// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: order_product.sql

package db_gen

import (
	"context"
)

const inserOrderProduct = `-- name: InserOrderProduct :exec
INSERT INTO order_products
    (
        id,
        order_id,
        product_id,
        price,
        quantity
    )
VALUES
    (
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type InserOrderProductParams struct {
	ID        string `json:"id"`
	OrderID   string `json:"order_id"`
	ProductID string `json:"product_id"`
	Price     int64  `json:"price"`
	Quantity  int32  `json:"quantity"`
}

func (q *Queries) InserOrderProduct(ctx context.Context, arg InserOrderProductParams) error {
	_, err := q.db.ExecContext(ctx, inserOrderProduct,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const orderProductFindByID = `-- name: OrderProductFindByID :one
SELECT
    id, order_id, product_id, price, quantity, created_at, updated_at
FROM
    order_products
WHERE
    id = ?
`

func (q *Queries) OrderProductFindByID(ctx context.Context, id string) (OrderProducts, error) {
	row := q.db.QueryRowContext(ctx, orderProductFindByID, id)
	var i OrderProducts
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
